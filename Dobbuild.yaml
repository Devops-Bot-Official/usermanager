version: '1.0'
mode: remote
identifier: AzureCrowRunner
category: Production
username: crowuser
environment:
  # === Crowstore-backed values ===
  SOURCE_URL:   { value: crowstore://USERMANAGMENT_URL }
  GIT_TOKEN:    { value: crowstore://gittoken }
  
  DOCKER_USERNAME:    { value: crowstore://CROWREGNAME }
  DOCKER_PASSWORD:    { value: crowstore://CROWREGNAMEPASS }

  IMAGE_NAME:    { value: crowstore://CROWUSERIMAGE }

  # === Testing Environment Variables ===
  ENTRA_SERVICE_URL:  { value: "https://test-entra.com" }
  AZURE_POSTGRES_URL: { value: "sqlite:///:memory:" }
  PYTHONPATH:         { value: "/home/crowuser/usermanagment/user-service" }

  # These must match the *names after* crowstore:// exactly (uppercased, no extra underscores m).
  CROWSTORE_TOKEN_USERMANAGMENT_URL:   { value: 1f3e1935450a72dda56eae6bde0cd5db }

  CROWSTORE_TOKEN_GITTOKEN:    { value: ee63e33b6b98a72756d732e115a5d256 }
 
  CROWSTORE_TOKEN_CROWREGNAME: { value: 59618baf11885921fbcb491b420b0856 }
  CROWSTORE_TOKEN_CROWREGNAMEPASS: { value: 03ba3a029d583c5c73c4464a9f85cd1d }
  
  CROWSTORE_TOKEN_CROWUSERIMAGE: { value: 16478c9db4acb5f80232eced3c4cb3e3 }

jobs:
- name: CROW PROD  USERMANAGMENT BUILD
  stages:
  - name: Updating Azure Server
    tasks:
      shell:
        enabled: false
        shell: bash
        steps:
        - sudo apt-get update -y
  # ======== Core: Checkout (invokes your Python helper under the hood ) ========
  - name: Git Checkout one
    tasks:
      checkout:
        enabled: true
        private_repo: true
        # --- required / important fields your function expects ---
        clone_dir: /home/crowuser/usermanagment
        source_url: env=SOURCE_URL
        branches: 
        - master
        provider: github
        username: Devops-Bot-Official
        token: env=GIT_TOKEN

  # ======== Testing Pipeline Stages ========
  - name: Install System Dependencies
    tasks:
      shell:
        enabled: true
        shell: bash
        steps:
        - sudo apt-get update -y
        - sudo apt-get install -y python3-dev python3-pip python3-venv

  - name: Setup Python Environment
    tasks:
      pip:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        python_bin: "python3"
        use_venv: true
        venv_path: "/home/crowuser/usermanagment/user-service/.venv"
        venv_python: "python3"
        upgrade_pip: true
        pip_check: true
        retries: 3
        retry_delay: 5
        requirements_file: "requirements.txt"
        prefer_binary: true
        only_binary: ":all:"
        steps:
          - install
          - check

  - name: Install Test Dependencies
    tasks:
      pip:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        use_venv: true
        venv_path: "/home/crowuser/usermanagment/user-service/.venv"
        pip_check: true
        retries: 3
        retry_delay: 5
        requirements_file: "test-requirements.txt"
        prefer_binary: true
        steps:
          - install
          - check

  - name: Install Additional Test Dependencies
    tasks:
      pip:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        use_venv: true
        venv_path: "/home/crowuser/usermanagment/user-service/.venv"
        packages:
          - "pytest>=7.0.0"
          - "pytest-asyncio>=0.21.0"
          - "pytest-mock>=3.0.0"
          - "httpx>=0.25.0"
          - "fakeredis>=2.20.0"
        steps:
          - install

  - name: Verify Test Environment
    tasks:
      pip:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        use_venv: true
        venv_path: "/home/crowuser/usermanagment/user-service/.venv"
        env:
          PYTHONPATH: "/home/crowuser/usermanagment/user-service"
        steps:
          - "run python -c 'import pytest; print(\"✅ pytest \" + pytest.__version__ + \" ready\")'" 

  - name: Final Environment Check
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - source .venv/bin/activate && python -c "import pytest, fastapi, sqlalchemy, pydantic; print('✅ All core dependencies available')"
        - source .venv/bin/activate && python -c "import sys; print('Python:' + sys.version); import pytest; print('pytest:' + pytest.__version__)"

  - name: Run Password Security Tests
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/test_password_security.py -v --tb=short

  - name: Run Validation Tests
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/test_validation.py -v --tb=short

  - name: Run Database Model Tests
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/test_models.py tests/test_utils.py -v --tb=short

  - name: Run Core Test Suite
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/test_password_security.py tests/test_validation.py tests/test_models.py tests/test_utils.py -x --tb=short

  - name: Run Edge Case Tests
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/test_edge_cases.py::TestEdgeCases::test_malformed_json_handling tests/test_edge_cases.py::TestEdgeCases::test_password_hashing_edge_cases tests/test_edge_cases.py::TestEdgeCases::test_missing_headers -v --tb=short

  - name: Run Security Feature Tests  
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/test_security.py::TestSecurityFeatures::test_rate_limiting_applied tests/test_security.py::TestSecurityFeatures::test_middleware_configuration tests/test_security.py::TestSecurityFeatures::test_application_startup_event tests/test_security.py::TestSecurityFeatures::test_fastapi_app_configuration -v --tb=short

  - name: Run Complete Test Suite
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - export AZURE_POSTGRES_URL="sqlite:///:memory:" && export ENTRA_SERVICE_URL="https://test-entra.com" && export PYTHONPATH="/home/crowuser/usermanagment/user-service" && source .venv/bin/activate && python -m pytest tests/ --maxfail=3 --tb=short

  - name: Generate Test Report
    tasks:
      shell:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        shell: bash
        steps:
        - source .venv/bin/activate && python -c 'print("✅ All critical user-service tests passed - Service ready for deployment")'

  - name: Generate Dependency Lockfile
    tasks:
      pip:
        enabled: true
        working_directory: "/home/crowuser/usermanagment/user-service"
        use_venv: true
        venv_path: "/home/crowuser/usermanagment/user-service/.venv"
        freeze_to: "/home/crowuser/usermanagment/user-service/requirements.lock"
        steps:
          - freeze

  - name: Image Build Stage
    tasks:
      docker_build:
        enabled: true
        image_name: env=IMAGE_NAME
        build_tag: V.0.0.10
        dockerfile_path: /home/crowuser/usermanagment/user-service/Dockerfile     

  - name: docker push stage
    tasks:
      docker_push:
        enabled: true
        provider: azure
        image_name: env=IMAGE_NAME
        image_tag: V.0.0.10
        username: env=DOCKER_USERNAME
        password: env=DOCKER_PASSWORD
